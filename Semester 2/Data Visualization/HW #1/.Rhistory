x=c(1,2,3,4,5)
print(x)
x=1:5
print(x)
?seq
x=seq(from=1, t0=5)
x=seq(from=1, to=5)
print(x)
x=seq(from=0,to=3,0.2)
print(x)
x=seq(from=0,to=3,by=0.2)
x=seq(from=0,to=3,lenght.out=100)
x=seq(from=0,to=3,,lenght.out=100)
x=seq(from=0,to=3,length.out=100)
u=c(1,-2)
v=c(2,-5)
x=4*u-3*v
print(x)
x=4*c(1,2)-3*c(2,-5)
print(x)
x=4*c(1,-2)-3*c(2,-5)
print(x)
A=c
A=c(1,2)
B=c(3,-1)
A*B
t(A)%*%B
t(B)%*%A
a1=c(1,-2,-5)
a2=c(2,5,6)
b=c(7,4,-3)
m=matrix(c(1,-2,-5,2,5,6,7,4,-3),nrow=3)
m
rref(m)
install.packages("pracma")
library(pracma)
detach("package:pracma", unload=TRUE)
library("pracma", lib.loc="C:/Users/satah/Anaconda3/R/library")
install.packages("pracma")
install.packages("pracma")
rref(m)
??rref
U=[1,-3,1]
U= [1,-3,1]
U= C(1,-3,1)
x=c(1,-3,1)
U=c(1,-3,1)
V=c(2,1,-2)
U*V
u=matrix(c(1,-3,4), nrow=3)
V=matrix(c(2,1,-2), nrow=3)
t(u)%*%v
library(pracma)
dot(u,v)
library("pracma")
dot(u,v)
t(u)%*%V
dot(u,V)
len(u)
lengtgh(u)
length(u)
u= matrix(c(1,-3,4), nrow=3)
length(u)
norm(u)
sqrt(t(u)%*%u)
norm(u,'2')
v = matrix(c(1,-2,2,0),norm=4)
v = matrix(c(1,-2,2,0),norw=4)
v = matrix(c(1,-2,2,0),nrow=4)
x= norm(v , '2')
u=x*V
u
x
u=v/x
u
norm(u,'2')
A= matrix(c(4,0,1,0,2,1), nrow=3)
a
A
b= matrix(c(2,0,11), nrow=3)
ginv(t(A)%*%A))%*%t9A)%*%b
inv(t(A)%*%A))%*%t9A)%*%b
inv(t(A)%*%A)%*%t9A)%*%b
inv(t(A)%*%A)%*%t(A)%*%b
library(MASS)
x=ginv(A)%*%b
x
A= matrix(c(4,0,1,0,2,1), nrow=3 , byrow=FALSE)
a
A
A= matrix(c(4,0,1,0,2,1), nrow=3 , byrow=TRUE)
A
A= matrix(c(4,0,0,2,1,1), nrow=3 , byrow=TRUE)
A
x=3
x
print(x)
x=3
install.packages(c('repr', 'IRdisplay', 'evaluate', 'crayon', 'pbdZMQ', 'devtools, 'uuid', 'digest'))
install.packages(c('repr', 'IRdisplay', 'evaluate', 'crayon', 'pbdZMQ', 'devtools, 'uuid', 'digest'))
devtools::install_github('IRkernel/IRkernel')
devtools::install_github('IRkernel/IRkernel')
update.packages()
y
install.packages(c('repr', 'IRdisplay', 'evaluate', 'crayon', 'pbdZMQ', 'devtools, 'uuid', 'digest'))
install.packages('repr', 'IRdisplay', 'evaluate', 'crayon', 'pbdZMQ', 'devtools, 'uuid', 'digest')
install.packages("repr")
install.packages(IRdisplay)
install.packages("IRdisplay")
install.packages(c("evaluate")
)
install.packages(c("crayon", "pbdZMQ", "devtools", "uuid", "digest"))
devtools::install_github("IRkernel/IRkernel")
devtools::install_github('IRkernel/IRkernel')
devtools::install_github("IRkernel/IRkernel")
IRkernel::installspec()
x=c(1,2,3,4,5)
print(x)
x<- c(1,2,3,4,5)
print(x)
x=1:5
x
x=seq(from=1,to=5)
x
x=seq(from=1,to=20)
x
seq(from=0,to=3,by=0.2)
seq(from=0,to=3,by=0.3)
seq(from=0,to=3,by=0.4)
seq(from=0,to=3,length.out = 100)
seq(from=0,to=3,length.out = 10)
seq(from=0,to=3,length.out = 20)
x=vector("numeric",length=10)
x
x=vector("logical",length=10)
x
x=vector("raw",length=10)
x
x=vector("character",length=10)
x
u=c(1,-2)
u
v=c(2,-5)
v
4*u
-3*v
4*u-3*v
A=c(1,2)
B=c(3,-1)
A*B
dot(A,B)
library(math)
library(plotmath)
A*t(B)
A%*%t(B)
A
B
t(A)
A%*%t(A)
t(A)%*%A
A
B
A*B
t(A)
t(A)*B
t(A)%#%B
t(A)%*%B
dot(A,B)
dot(A,B)
library(Matrix)
A=c(2,1)
B=c(5,7)
dot(A,B)
version
library(Matrix)
dot(A,B)
library(pracma)
install.packages("pracma")
dot(A,B)
install.packages("Matrix")
install.packages("Matrix")
dot(A,B)
install.packages("DOT")
dot(A,B)
install.packages("geometry")
dot(A,B)
dot(A,B)
A
B
dot(A,B)
m=matrix(c(1,-2,5,2,5,6,7,4,-3),nrow=3)
m
m=matrix(c(1,-2,5,2,5,6,7,4,-3),nrow=2)
m=matrix(c(1,-2,5,2,5,6,7,4,-3,4),nrow=2)
m
m=matrix(c(1,-2,5,2,5,6,7,4,-3),nrow=2)
m=matrix(c(1,-2,5,2,5,6,7,4,-3),nrow=3)
m
rref(m)
instal.packages("pracma")
install.packages("pracma")
rref(m)
library("pracma", lib.loc="~/R/win-library/3.4")
rref(m)
m
rref(m)
m=matrix(c(1,-2,5,2,5,6,12,4,-3),nrow=3)
rref(m)
MyFamily_Cars <- c(rep("Toyota",3),"Ford","Mercedes")
MyFamily_Cars <- factor(MyFamily_Cars)
print(MyFamily_Cars)
Friends_State <- c("CA","NY","AZ","AZ","NY","OH")
Friends_State <- factor(Friends_State)
print(Friends_State)
Material_Type <- c("Liquid",rep("Solid", 3),"Liquied",rep("Gaz",2))
Material_Type <- factor(Material_Type,levels=c(levels(Material_Type),"Nano"))
print(Material_Type)
Material_Type <- c("Liquid",rep("Solid", 3),"Liquid",rep("Gaz",2))
Material_Type <- factor(Material_Type,levels=c(levels(Material_Type),"Nano"))
print(Material_Type)
Material_Type <- c("Liquid",rep("Solid", 3),"Liquid",rep("Gaz",2))
Material_Type <- factor(Material_Type)
print(Material_Type)
levels(Material_Type)
Material_Type <- factor(Material_Type,levels=c(levels(Material_Type),"Nano"))
print(Material_Type)
Material_Type <- c("Liquid",rep("Solid", 3),"Liquid",rep("Gaz",2))
Material_Type <- factor(Material_Type,levels=c(levels(Material_Type),"Nano"))
print(Material_Type)
Material_Type
Material_Type <- c("Liquid",rep("Solid", 3),"Liquid",rep("Gaz",2))
Material_Type <- factor(Material_Type,levels=c(levels(Material_Type),"Nano"))
Material_Type
Material_Type <- c("Liquid",rep("Solid", 3),"Liquid",rep("Gaz",2))
Material_Type <- factor(Material_Type)
Material_Type <- factor(Material_Type,levels=c(levels(Material_Type),"Nano"))
print(Material_Type)
values <- seq(1,12,by=2)
values
dim(values) <- c(2,3)
values
dim(values) <- c(3,2)
values
houshold_income_fall <- matrix(c(50,55,65,60,70,40),nrow=2)
print(houshold_income_fall)
income_fall_winter <- matrix(c(68,73,40,38,95,105),nrow=2)
print(income_fall_winter)
income_spring_summer <- matrix(c(80,64,50,52,83,135),nrow=2)
print(income_spring_summer)
income_year <- rbind(income_fall_winter,income_spring_summer)
print(income_year)
print(t(income_year))
ID <- c(1:5)
Countries <-c("USA","France","IRAN","Egypt","India")
Population_million <-c("323","70","81","96","1325")
Capital <- c("Washington","Paris","Tehran","Cairo","New Delhi")
df_world <-data.frame(ID,Countries,Population_million,Capital)
pdint(df_world)
pdint(df_world)
print(df_world)
Is_developed <- c(TRUE,TRUE,FALSE,FALSE,FALSE)
df_world <-data.frame(Countries,Population_million,Capital,Is_developed)
print(df_world)
print(df_world(df_world$Population_million>1000))
print(df_world[df_world$Population_million>1000])
print(df_world[df_world$Population_million > 1000])
df_world
print(df_world[df_world$Population_million >= 1000])
print(df_world[df_world$Countries == "USA"])
print(df_world[df_world$Population_million >= 1000,])
print(df_world[df_world$Population_million > 1000,])
print(df_world[df_world$Countries == "USA",])
print(df_world[df_world$Population_million > 1000 ,])
print(df_world[df_world$Population_million>1000,])
df_world
df_world[1,]
df_world[1:2,]
df_world[,3]
df_world[,3:4]
df_world[df_world$Is_developed== TRUE]
df_world[df_world$Is_developed== "TRUE"]
df_world[df_world$Is_developed== "TRUE",]
df_world[df_world$Population_million < 800]
df_world[df_world$Population_million < 800,]
df_world[df_world$Population_million < "800",]
df_world[df_world$Population_million
unlink('first 1_cache', recursive = TRUE)
install.packages("dplyr")
library(dplyr)
a <- c(7,27,12)
b <- c(5,3,9)
a+b
a-b
a%%b
a%/%b
a^b
a =c(13.5,6,9, -4)
b= c(9,14,9.0, -6)
a>b
a<b
a>=b
a!=b
-6%in%b
a=c(2+3==5,TRUE,-1,FALSE,1>-1)
b=c(FALSE,4, 1-1!=0,TRUE,TRUE)
a&b
a&&b
!a
a||b
100 ==!0
100 == 0
100 == 1
!0
!100
100 == TRUE
100 > TRUE
1 == TRUE
2==TRUE
# 1
# Some of square of two vectors
"%Sum.of.squares%"<-function(v1,v2){}
# Some of square of two vectors
"%Sum.of.squares%"<-function(v1,v2){return(V1^2+V2^2)}
# Some of square of two vectors
"%SumSquares%"<-function(v1,v2){return(V1^2+V2^2)}
1%SumSquares%5
# Some of square of two vectors
"%SumSquares%"<-function(v1,v2){return(v1^2+v2^2)}
1%SumSquares%5
c(-3,-4) %SumSquares% (4,3)
# Some of square of two vectors
"%SumSquares%"<-function(v1,v2){return(v1^2+v2^2)}
1%SumSquares%5
c(-3,-4) %SumSquares% c(4,3)
c(1,2,3,4) %SumSquares% c(0,0,0,0)
# Total Charge of PG&E for 3 years
# Total Charge of PG&E for 3 years
Rate of Spring <- 5
# Total Charge of PG&E for 3 years
Rate.of.Spring <- 5
Rate.of.Summer <- 8
Rate.of.Fall <- 6
Rate.of.Winter <- 7
Seasonal.usage=c(20,25,29,24,23,36,25,31,25,38,17,29)
Seasonal.cost=Seasonal.usage* c(Rate.of.Spring,Rate.of.Summer,Rate.of.Fall,Rate.of.Winter)
Seasonal.cost
Total.cost=sum(Seasonal.cost)
Total.cost
a <- 14
if (a%%2 == 0){}
if (a%%2 == 0){ }
if (a%%2 == 0){ print("Even Number") }
a <- 14
if (a%%2 == 0){ print("Even Number") }
a < 15
a <- 15
if (a%%2 == 0){ print("Even Number") } else {"Odd Number"}
switch(a%%2,0={"Even Number"},1={"Odd Number"})
switch(a%%2,0={print("Even Number")},1={print("Odd Number")})
a
switch( a%%2,
0 ={print("Even Number")},
switch( a%%2,
0 = {print("Even Number")}
a%%2
switch( a%%2,
0 ={print("Even Number")},
switch( a%%2,
0 = {print("Even Number")},
switch( a%%2,
0 = print("Even Number"))
switch( a%%2,)
switch( a%%2,0 ={print("Even Number")})
switch( a%%2,0 : {print("Even Number")})
switch( a%%2,0  {print("Even Number")})
switch( a%%2,=0  {print("Even Number")})
switch( a%%2,1=  {print("Even Number")})
counry = "IRAN"
country = "IRAN"
switch(country,"IRAN"={print("In Asia")},"France"={print("In Europe")})
n =1
repeat {}
n=1
s=0
repeat{s=s+n
n=n+1
if (n>100) {break}}
s
l=c(1:100)
s=0
for(n in l) {s=s+n}
s
n=1
s=0
while (n <= 100){s=s+n,n=n+1}
n=1
s=0
while (n <= 100){s=s+n
n=n+1}
s
SumSquares <-function(n){}
SumSquares <-function(n){
S =0
for(k in c(1,n)) {
s=s+k
}
return(s)
}
SumSquares <-function(n){
S =0
for(k in c(1,n)) {
s=s+k^2
}
return(s)
}
SumSquares(4)
SumSquares(1)
SumSquares <-function(n){
s=0
for(k in c(1,n)) {
s=s+k^2
}
return(s)
}
SumSquares(4)
SumSquares(55)
SumSquares(2.5)
SumSquares(1000)
SumSquares <-function(n){
s=0
for(k in c(1:n)) {
s=s+k^2
}
return(s)
}
SumSquares(4)
SumSquares(55)
SumSquares(1000)
SumSquares(2.5)
M <- matrix(c(1,5,-2, 7),nrow=2,byrow=TRUE)
M
apply(M,1,min)
apply(M,2,sum)
2 | FALSE
-1 | FALSE
ascending <- function(v) {
result=TRUE
i=1
while(i <= length(v)) {
if (v[i] > v[i+1]) {
result= FALSE
Break
}
}
return(result)
}
my.vector = c(3,40,55,104,400)
my.vector
print(ascending(my.vector))
A=matrix(c(2,3,3,-6),nrow=2)
A
eig=eigen(A)
eig$values
A=matrix(c(2,3,3,-6),nrow=2)
A
eig=eigen(A)
eig$vectors
A=matrix(c(2,3,3,-6),nrow=2)
A
eig=eigen(A)
eig$vectors
eig$values
A=matrix(c(2,-4,3,4,-6,3,3,-3,1),nrow=3)
eig=eigen(A)
eig$vectors
eig$values
A
eigen(A)
round(eig$vector, digits=3)
TP.Matrix=matrix(c(p,1-p,1-p,p),nrow=2)
A=matrix(c(0,1/2,1/2,0,0,1/3,0,1/3,1/3,0,1/4,1/4,0,1/4,1/4,0,1/3,1/3,0,1/3,0,0,1/2,1/2,0),nrow=5)
A
eigen(A)
rref(A-I)
setwd("C:/Users/satah/Desktop/Pacific/T1/Analytics/Project 1")
LVstrip.data=read.table("LasVegasTripAdvisorReviews-Dataset.csv")
LVstrip.data=read.csv("LasVegasTripAdvisorReviews-Dataset.csv",header=TRUE,sep=",")
LVstrip.data
LVstrip.data=read.csv("LasVegasTripAdvisorReviews-Dataset.csv",header=TRUE,sep=";")
LVstrip.data
row.names(LVstrip.data)
col.names(LVstrip.data)
LVstrip.data
LVstrip.data[50:100,0]
LVstrip.data[50:100,]
LVstrip.data[250:299,]
